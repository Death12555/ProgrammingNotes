{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12300\viewh10860\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs48 \cf0 Git:\
It is a version control system.(A system that helps us keep track of our files)\
Features:\
1. Easily recoverable files.\
2. Who introduced an issue and where.\
3. Roll back to previously working state.\
\
History of VCS:\
i) Local VCS -> DataBase- to keep track of files(everything in the computer itself)\
Pros:\
-> can keep track of files and rollback.\
Cons:\
-> If you lose your files hard disk, everything is lost.\
\
ii) Centralized VCS-> Server is used to keep files-files can be pulled to work on them by multiple people simultaneously.\
Pros:\
-> Files can be pulled to work on them and then pushed back to the server when work is done.\
-> Copy of the file in centralised server is considered as the final copy.\
-> Damage to the file prevented since multiple people can own the file\
Cons:\
-> If centralised server gets damaged the final version of the file maybe lost.\
-> All data is on the server and may get lost if the server is damaged.\
\
iii) Distributed VCS-> Similar to Centralized except every user gets the entire history of files on the server as a repository to use along with the project as backup. It is a smart system that doesn\'92t take to much space.\
Pros:\
-> Since everyone has backup only source code files are pulled.\
-> Only the changes made are saved instead of saving the entire file/project again(The system is smart that way).\
\
Git is Distributed Version Control System.\
\
Git, GitHub, GitLab, BitBucket,\
\
Features:\
-> Captures snapshots and not differences(stores different versions of the file, to use or used for recovery stored locally in folder named \'91.git\'92).\
-> Almost every operations are local.\
-> Git has integrity(uses checksum(string (SHA-1 checksum) is used for checking integrity)).\
-> Git generally only adds data.\
\
Basic Commands:\
-> git config user.name \'93nam_of_user\'94 (used to change the name and see user\'92s name).\
-> git config user.email \'93email_of_user\'94 (same as name).\
-> git config \'97global core.editor \'93emacs\'94 (used to choose editor).\
-> git status (checks status/whether a git repository exists in the current directory or not).\
(If it gives \'91On branch master\'92 know that it means the branch is the master/main branch)\
(\'92No commits yet\'92 imply no snapshots/versions are put in the directory/repository).\
(Untracked files(files in the repository that are not committed).\
(Tracks modifications made in the file too, in any are made then they need to be added separately, since each change is a new version for the repository to commit individually).\
Nothing to commit, working tree clean means all files/versions are committed and working tree is clean\
-> git init (to create/initialize a new git repository).\
-> git add --a (add all files in the repository to the staging area).\
-> git add file_name (adds the specified file to the staging area).\
-> git commit -m \'93message_with_the_commit\'94 (to commit files with message) if only git commit is typed then a text editor is opened.\
-> git log (used to see what we have committed. Shows the message we have given along with the files).\
(Gives strings/hashes according to the number of commits, Each string is used for logging).\
(Gives the log of changes made by other users who have downloaded the repository too).\
-> rm -rf .git (used to stop tracking files in a folder, and removes/deletes all files in a folder).\
(Deletes .git folder).\
-> git clone url_of_git_repository (used to clone a git repository from GitHub).\
(If we need to name the folder as something else then all we need to do is add name after the url e.g.: git clone url_of_git_repository repository_name).\
-> touch .gitignore (used to ignore files that are untracked. All we have to do is input the name of the file in .gitignore(use any text editor to do so)).\
(If we want to add all files of a certain type to be ignored, all we have to do is use *.file_type to ignore files of those type, e.g.: if we want to ignore all log files in the directory then just use *.log )\
(This can also be used to ignore directories inside the repository by just adding them in .gitignore)\
->\
\
Commit:\
Capturing versions/snapshots of source codes to save them as different versions to use and for backup.\
\
Git\'92s Three Stage Directory:\
Local Operations:\
1. Working Directory:\
The directory(the one we access through windows explorer/finder etc.) that we open to see its contents(files, executables, source code etc.)\
\
2. Staging Area:\
This contains those files that we want to push in the upcoming commit.\
\
3. Git Directory:\
\'91.git\'92 named hidden folder/directory that contains compressed files/versions of our files of our programs that gives the users the files that they need.\
\
\'91.git\'92 gives files of the working directory.\
\
File Status Lifecycle:\
1. Untracked: When a new directory is converted into working directory/repository then the files at the time are still not added to the staging area.\
\
git add is also used to make the untracked into unmodified files before they are sent to the staging area.\
\
Unmodified means Now tracking.\
\
2. Unmodified: After adding files to the staging area, they become unmodified. From here they are sent to the staging area.\
\
3. Modified: After changing/editing them they become modified. Due to making changes their newer versions will need to be added to the staging area.\
\
4. Staged: Using git add after these 2 will get the files staged.\
\
After getting staged they are committed they become unmodified again.\
\
We can even remove/untrack the file from there. If we want.\
\
}